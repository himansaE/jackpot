// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// public ticket data
model TicketName {
  id                 Int    @id @map("_id")
  name               String @unique
  subscription_price Int
}

model TicketResult {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  date         DateTime
  draw         Int
  results      Int[]
  spetial      String
  spetial_nums Int[]
  name         String
}

// user data

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  email          String          @unique
  first_name     String
  last_name      String
  phone          String?
  phoneValidated Boolean         @default(false)
  emailValidated Boolean         @default(false)
  image          String?
  acc_bal        Int             @default(0)
  providers      String[]
  auth_session   Session[]
  key            Key[]
  Subscription   Subscription[]
  Payments       Payments[]
  TicketsToDrow  TicketsToDrow[]
  TicketHistory  TicketHistory[]
  Oauth          Oauth[]
}

model Session {
  id             String  @id @map("_id")
  user_id        String  @db.ObjectId
  active_expires BigInt
  idle_expires   BigInt
  oauth_provider String?
  user           User    @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model Key {
  id              String  @id @map("_id")
  hashed_password String?
  user_id         String  @db.ObjectId
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model Oauth {
  id            String @id @map("_id")
  provider      String
  access_token  String
  refresh_token String
  email         String
  user_id       String @db.ObjectId
  user          User   @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model Subscription {
  account      User     @relation(fields: [user_id], references: [id])
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id      String   @db.ObjectId
  date         DateTime
  ticket_id    Int
  ticket_price Int
  payment_id   String   @db.ObjectId
}

model Payments {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  acc     User   @relation(fields: [user_id], references: [id])
  user_id String @db.ObjectId
  reson   String
}

model TicketsToDrow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  acc       User     @relation(fields: [user_id], references: [id])
  user_id   String   @db.ObjectId
  drow_date DateTime
  ticket_id Int
  values    String[]
  spetial   String[]
  buyDate   DateTime
}

model TicketHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  acc       User     @relation(fields: [user_id], references: [id])
  user_id   String   @db.ObjectId
  drow_date DateTime
  ticket_id Int
  values    String[]
  spetial   String[]
  buyDate   DateTime
}
